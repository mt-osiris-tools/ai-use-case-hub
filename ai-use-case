#!/bin/bash
# AI Use Case - Unified CLI Tool
# Simple interface for documenting AI-assisted development workflows
#
# Usage:
#   ai-use-case --init          Setup current project
#   ai-use-case document        Document an AI session
#   ai-use-case sync            Sync use cases to hub
#   ai-use-case search <term>   Search use cases
#   ai-use-case --help          Show help

set -e

# Detect script location (where the hub is installed)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HUB_DIR="${AI_USECASES_DIR:-$SCRIPT_DIR}"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Show version
VERSION="2.1.0"

# Show help
show_help() {
    cat <<EOF
${BLUE}ai-use-case${NC} - Document AI-assisted development workflows

${YELLOW}Version:${NC} $VERSION

${YELLOW}Usage:${NC}
  ai-use-case [command] [options]

${YELLOW}Commands:${NC}
  ${GREEN}--init, init${NC}              Setup current project for AI use cases
  ${GREEN}document, doc${NC}             Document an AI-assisted session (interactive)
  ${GREEN}sync${NC}                      Sync use cases from current project to hub
  ${GREEN}search <term>${NC}             Search all use cases for a keyword/topic
  ${GREEN}view${NC}                      View use cases in hub (opens file explorer)
  ${GREEN}list${NC}                      List all projects with use cases
  ${GREEN}stats${NC}                     Show statistics about documented use cases
  ${GREEN}--help, -h${NC}                Show this help message
  ${GREEN}--version, -v${NC}             Show version information

${YELLOW}Examples:${NC}
  # First time setup
  ai-use-case --init

  # Document your AI session
  ai-use-case document

  # Search for authentication-related use cases
  ai-use-case search authentication

  # View statistics
  ai-use-case stats

${YELLOW}Quick Start:${NC}
  1. Run 'ai-use-case --init' in your project
  2. Work on your code with AI assistance
  3. Run 'ai-use-case document' when done
  4. Use 'ai-use-case search' to find similar work

${YELLOW}Hub Location:${NC}
  $HUB_DIR

${YELLOW}More Info:${NC}
  README:          $HUB_DIR/README.md
  Quick Reference: $HUB_DIR/QUICK-REFERENCE.md
  Repository:      https://github.com/james401/ai-use-case-hub-

EOF
}

# Command: init (setup project)
cmd_init() {
    echo -e "${BLUE}=== Setup AI Use Cases ===${NC}"
    bash "$HUB_DIR/setup-project.sh" "${1:-.}"
}

# Command: document
cmd_document() {
    echo -e "${BLUE}=== Document AI Session ===${NC}"
    bash "$HUB_DIR/document-ai-session.sh" "${1:-.}"
}

# Command: sync
cmd_sync() {
    echo -e "${BLUE}=== Sync AI Use Cases ===${NC}"
    bash "$HUB_DIR/sync-ai-use-cases.sh" "${1:-.}"
}

# Command: search
cmd_search() {
    if [ -z "$1" ]; then
        echo -e "${RED}Error: Search term required${NC}"
        echo "Usage: ai-use-case search <term>"
        exit 1
    fi

    echo -e "${BLUE}=== Search AI Use Cases ===${NC}"
    echo "Searching for: ${YELLOW}$1${NC}"
    echo ""

    cd "$HUB_DIR"

    echo -e "${GREEN}📁 Files matching '$1':${NC}"
    find by-project -name "*$1*" -type f 2>/dev/null | head -20 || echo "  No matches"

    echo ""
    echo -e "${GREEN}📝 Content matches:${NC}"
    grep -r "$1" by-project --include="*.md" -l 2>/dev/null | head -20 || echo "  No matches"
}

# Command: view
cmd_view() {
    echo -e "${BLUE}=== View Use Cases Hub ===${NC}"

    if [ -d "$HUB_DIR/by-project" ]; then
        if command -v xdg-open &> /dev/null; then
            xdg-open "$HUB_DIR" &
        elif command -v open &> /dev/null; then
            open "$HUB_DIR" &
        else
            echo "Hub location: $HUB_DIR"
        fi
        echo -e "${GREEN}✓${NC} Opened hub directory"
    else
        echo -e "${RED}Error: Hub not found at $HUB_DIR${NC}"
        exit 1
    fi
}

# Command: list
cmd_list() {
    echo -e "${BLUE}=== Projects with AI Use Cases ===${NC}"
    echo ""

    cd "$HUB_DIR"

    if [ ! -d "by-project" ]; then
        echo -e "${YELLOW}No projects found${NC}"
        exit 0
    fi

    for dir in by-project/*/; do
        if [ -d "$dir" ]; then
            project=$(basename "$dir")
            count=$(find "$dir" -name "*.md" -type f | wc -l)
            echo -e "${GREEN}$project${NC}: $count use case(s)"
        fi
    done
}

# Command: stats
cmd_stats() {
    echo -e "${BLUE}=== AI Use Cases Statistics ===${NC}"
    echo ""

    cd "$HUB_DIR"

    if [ ! -d "by-project" ]; then
        echo -e "${YELLOW}No use cases found${NC}"
        exit 0
    fi

    # Total use cases
    total=$(find by-project -name "*.md" -type f | wc -l)
    echo -e "${GREEN}Total use cases:${NC} $total"

    # Total projects
    projects=$(find by-project -mindepth 1 -maxdepth 1 -type d | wc -l)
    echo -e "${GREEN}Projects:${NC} $projects"

    echo ""
    echo -e "${YELLOW}Use cases per project:${NC}"
    for dir in by-project/*/; do
        if [ -d "$dir" ]; then
            project=$(basename "$dir")
            count=$(find "$dir" -name "*.md" -type f | wc -l)
            echo "  $project: $count"
        fi
    done | sort -t: -k2 -rn

    echo ""
    echo -e "${YELLOW}Most common AI tools:${NC}"
    grep -h "Agent Used:" by-project/*/*.md 2>/dev/null | \
        sed 's/.*Agent Used:\*\* //' | \
        sort | uniq -c | sort -rn | head -5 || echo "  No data available"

    echo ""
    echo -e "${YELLOW}Total time saved (from documented sessions):${NC}"
    time_saved=$(grep -h "Time Saved:" by-project/*/*.md 2>/dev/null | \
        grep -oP '\d+(\.\d+)?' | \
        awk '{sum+=$1} END {print sum}' || echo "0")
    echo "  ~${time_saved} hours"

    echo ""
    echo -e "${GREEN}Hub location:${NC} $HUB_DIR"
}

# Main command dispatcher
main() {
    # No arguments - show help
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    # Parse command
    case "$1" in
        --init|init)
            shift
            cmd_init "$@"
            ;;
        document|doc)
            shift
            cmd_document "$@"
            ;;
        sync)
            shift
            cmd_sync "$@"
            ;;
        search)
            shift
            cmd_search "$@"
            ;;
        view)
            cmd_view
            ;;
        list)
            cmd_list
            ;;
        stats)
            cmd_stats
            ;;
        --help|-h|help)
            show_help
            ;;
        --version|-v)
            echo "ai-use-case version $VERSION"
            ;;
        *)
            echo -e "${RED}Error: Unknown command '$1'${NC}"
            echo "Run 'ai-use-case --help' for usage information"
            exit 1
            ;;
    esac
}

main "$@"
